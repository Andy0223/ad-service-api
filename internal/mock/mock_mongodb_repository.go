// Code generated by MockGen. DO NOT EDIT.
// Source: internal/advertisement/repository/mongodb/mongodb_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	models "ad-service-api/internal/models"
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
)

// MockAdvertisementRepository is a mock of AdvertisementRepository interface.
type MockAdvertisementRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdvertisementRepositoryMockRecorder
}

// MockAdvertisementRepositoryMockRecorder is the mock recorder for MockAdvertisementRepository.
type MockAdvertisementRepositoryMockRecorder struct {
	mock *MockAdvertisementRepository
}

// NewMockAdvertisementRepository creates a new mock instance.
func NewMockAdvertisementRepository(ctrl *gomock.Controller) *MockAdvertisementRepository {
	mock := &MockAdvertisementRepository{ctrl: ctrl}
	mock.recorder = &MockAdvertisementRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdvertisementRepository) EXPECT() *MockAdvertisementRepositoryMockRecorder {
	return m.recorder
}

// CountActive mocks base method.
func (m *MockAdvertisementRepository) CountActive(ctx context.Context, now time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountActive", ctx, now)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountActive indicates an expected call of CountActive.
func (mr *MockAdvertisementRepositoryMockRecorder) CountActive(ctx, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountActive", reflect.TypeOf((*MockAdvertisementRepository)(nil).CountActive), ctx, now)
}

// Create mocks base method.
func (m *MockAdvertisementRepository) Create(ctx context.Context, ad *models.Advertisement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ad)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAdvertisementRepositoryMockRecorder) Create(ctx, ad interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAdvertisementRepository)(nil).Create), ctx, ad)
}

// Fetch mocks base method.
func (m *MockAdvertisementRepository) Fetch(ctx context.Context, filter bson.M, limit, offset int) ([]*models.Advertisement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, filter, limit, offset)
	ret0, _ := ret[0].([]*models.Advertisement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockAdvertisementRepositoryMockRecorder) Fetch(ctx, filter, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockAdvertisementRepository)(nil).Fetch), ctx, filter, limit, offset)
}
