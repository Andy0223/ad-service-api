// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	models "ad-service-api/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	time "time"
)

// MockAdvertisementService is an autogenerated mock type for the IAdvertisementService type
type MockAdvertisementService struct {
	mock.Mock
}

// CountActive provides a mock function with given fields: ctx, now
func (_m *MockAdvertisementService) CountActive(ctx context.Context, now time.Time) (int, error) {
	ret := _m.Called(ctx, now)

	if len(ret) == 0 {
		panic("no return value specified for CountActive")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) (int, error)); ok {
		return rf(ctx, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) int); ok {
		r0 = rf(ctx, now)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAd provides a mock function with given fields: ctx, ad
func (_m *MockAdvertisementService) CreateAd(ctx context.Context, ad *models.Advertisement) error {
	ret := _m.Called(ctx, ad)

	if len(ret) == 0 {
		panic("no return value specified for CreateAd")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Advertisement) error); ok {
		r0 = rf(ctx, ad)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAdById provides a mock function with given fields: ctx, id
func (_m *MockAdvertisementService) DeleteAdById(ctx context.Context, id primitive.ObjectID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAdById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAdsCacheByPattern provides a mock function with given fields: ctx, pattern
func (_m *MockAdvertisementService) DeleteAdsCacheByPattern(ctx context.Context, pattern string) error {
	ret := _m.Called(ctx, pattern)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAdsCacheByPattern")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, pattern)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx, filter, limit, offset
func (_m *MockAdvertisementService) Fetch(ctx context.Context, filter primitive.M, limit int, offset int) ([]*models.Advertisement, error) {
	ret := _m.Called(ctx, filter, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []*models.Advertisement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M, int, int) ([]*models.Advertisement, error)); ok {
		return rf(ctx, filter, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M, int, int) []*models.Advertisement); ok {
		r0 = rf(ctx, filter, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Advertisement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.M, int, int) error); ok {
		r1 = rf(ctx, filter, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdById provides a mock function with given fields: ctx, id
func (_m *MockAdvertisementService) GetAdById(ctx context.Context, id primitive.ObjectID) (*models.Advertisement, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAdById")
	}

	var r0 *models.Advertisement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (*models.Advertisement, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *models.Advertisement); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Advertisement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAds provides a mock function with given fields: ctx, key, validQueryParams
func (_m *MockAdvertisementService) GetAds(ctx context.Context, key string, validQueryParams map[string]string) ([]*models.Advertisement, error) {
	ret := _m.Called(ctx, key, validQueryParams)

	if len(ret) == 0 {
		panic("no return value specified for GetAds")
	}

	var r0 []*models.Advertisement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) ([]*models.Advertisement, error)); ok {
		return rf(ctx, key, validQueryParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) []*models.Advertisement); ok {
		r0 = rf(ctx, key, validQueryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Advertisement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = rf(ctx, key, validQueryParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdsByKey provides a mock function with given fields: ctx, key
func (_m *MockAdvertisementService) GetAdsByKey(ctx context.Context, key string) ([]*models.Advertisement, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetAdsByKey")
	}

	var r0 []*models.Advertisement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.Advertisement, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.Advertisement); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Advertisement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByDate provides a mock function with given fields: ctx, today
func (_m *MockAdvertisementService) GetByDate(ctx context.Context, today string) (int, error) {
	ret := _m.Called(ctx, today)

	if len(ret) == 0 {
		panic("no return value specified for GetByDate")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, today)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, today)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, today)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrByDate provides a mock function with given fields: ctx, key
func (_m *MockAdvertisementService) IncrByDate(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for IncrByDate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsAdExpired provides a mock function with given fields: ad, now
func (_m *MockAdvertisementService) IsAdExpired(ad []*models.Advertisement, now time.Time) bool {
	ret := _m.Called(ad, now)

	if len(ret) == 0 {
		panic("no return value specified for IsAdExpired")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func([]*models.Advertisement, time.Time) bool); ok {
		r0 = rf(ad, now)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetAdsByKey provides a mock function with given fields: ctx, key, ads, expiration
func (_m *MockAdvertisementService) SetAdsByKey(ctx context.Context, key string, ads []*models.Advertisement, expiration time.Duration) error {
	ret := _m.Called(ctx, key, ads, expiration)

	if len(ret) == 0 {
		panic("no return value specified for SetAdsByKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*models.Advertisement, time.Duration) error); ok {
		r0 = rf(ctx, key, ads, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAdById provides a mock function with given fields: ctx, id, ad
func (_m *MockAdvertisementService) UpdateAdById(ctx context.Context, id primitive.ObjectID, ad *models.Advertisement) error {
	ret := _m.Called(ctx, id, ad)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAdById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, *models.Advertisement) error); ok {
		r0 = rf(ctx, id, ad)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockAdvertisementService creates a new instance of MockAdvertisementService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdvertisementService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdvertisementService {
	mock := &MockAdvertisementService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
