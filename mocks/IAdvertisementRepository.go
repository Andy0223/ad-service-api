// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	models "ad-service-api/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	time "time"
)

// MockAdvertisementRepository is an autogenerated mock type for the IAdvertisementRepository type
type MockAdvertisementRepository struct {
	mock.Mock
}

// CountActive provides a mock function with given fields: ctx, now
func (_m *MockAdvertisementRepository) CountActive(ctx context.Context, now time.Time) (int, error) {
	ret := _m.Called(ctx, now)

	if len(ret) == 0 {
		panic("no return value specified for CountActive")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) (int, error)); ok {
		return rf(ctx, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) int); ok {
		r0 = rf(ctx, now)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, ad
func (_m *MockAdvertisementRepository) Create(ctx context.Context, ad *models.Advertisement) error {
	ret := _m.Called(ctx, ad)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Advertisement) error); ok {
		r0 = rf(ctx, ad)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx, filter, limit, offset
func (_m *MockAdvertisementRepository) Fetch(ctx context.Context, filter primitive.M, limit int, offset int) ([]*models.Advertisement, error) {
	ret := _m.Called(ctx, filter, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []*models.Advertisement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M, int, int) ([]*models.Advertisement, error)); ok {
		return rf(ctx, filter, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M, int, int) []*models.Advertisement); ok {
		r0 = rf(ctx, filter, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Advertisement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.M, int, int) error); ok {
		r1 = rf(ctx, filter, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockAdvertisementRepository creates a new instance of MockAdvertisementRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdvertisementRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdvertisementRepository {
	mock := &MockAdvertisementRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
