// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	models "ad-service-api/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockAdRedisRepository is an autogenerated mock type for the IAdRedisRepository type
type MockAdRedisRepository struct {
	mock.Mock
}

// DeleteAdsCacheByPattern provides a mock function with given fields: ctx, pattern
func (_m *MockAdRedisRepository) DeleteAdsCacheByPattern(ctx context.Context, pattern string) error {
	ret := _m.Called(ctx, pattern)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAdsCacheByPattern")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, pattern)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAdsByKey provides a mock function with given fields: ctx, key
func (_m *MockAdRedisRepository) GetAdsByKey(ctx context.Context, key string) ([]*models.Advertisement, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetAdsByKey")
	}

	var r0 []*models.Advertisement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.Advertisement, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.Advertisement); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Advertisement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByDate provides a mock function with given fields: ctx, key
func (_m *MockAdRedisRepository) GetByDate(ctx context.Context, key string) (int, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetByDate")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrByDate provides a mock function with given fields: ctx, key
func (_m *MockAdRedisRepository) IncrByDate(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for IncrByDate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAdsByKey provides a mock function with given fields: ctx, key, ads, expiration
func (_m *MockAdRedisRepository) SetAdsByKey(ctx context.Context, key string, ads []*models.Advertisement, expiration time.Duration) error {
	ret := _m.Called(ctx, key, ads, expiration)

	if len(ret) == 0 {
		panic("no return value specified for SetAdsByKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*models.Advertisement, time.Duration) error); ok {
		r0 = rf(ctx, key, ads, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockAdRedisRepository creates a new instance of MockAdRedisRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdRedisRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdRedisRepository {
	mock := &MockAdRedisRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
